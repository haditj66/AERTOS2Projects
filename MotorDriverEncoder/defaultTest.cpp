//generated file: C:/Users/hadi/Documents/AERTOSProjects/MotorDriverEncoder\defaultTest.cpp
//**********************************************************************
//this is an auto-generated file using the template file located in the directory of C:\CodeGenerator\CodeGenerator\bin\Debug\..\..\FileTemplates\Files
//ONLY WRITE CODE IN THE UserCode_Section BLOCKS
//If you write code anywhere else,  it will be overwritten. modify the actual template file if needing to modify code outside usersection blocks.

//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


 
#if INTEGRATION_TESTS_FOR_MotorDriverEncoder__defaultTest
 
#include "IntegTestPipeline.h"


#include "AECore.h"
#include "AE_Init.h" 
#include "AEClock.h" 
#include "AEObjects.h" 

DECLARE_ALL_AO_PTR

static void clock1_cb(TimerHandle_t xTimerHandle);
#include "LoopTest.h"
static LoopTest* looptest;




//UserCode_Sectiona
//UserCode_Sectiona_end

void RunSelectedIntegrationTest_defaultTest()
{

AE_Init();
 //UserCode_Sectionbeforemain
//UserCode_Sectionbeforemain_end




static MotorDriverSpeedControllerTDU motorDriverSpeedControllerTDU_L; motorDriverSpeedControllerTDU_L.Init(AEPriorities::MediumPriority);
motorDriverSpeedControllerTDU = &motorDriverSpeedControllerTDU_L;


static AEClock<AEObservorSensor, AEObservorInterpretorBaseDUMMY, 2, 0, 0, 0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0> clock1L(1000, clock1_cb);
clock1 = &clock1L;

static AEObservorSensorFilterOut< 1, Filter<HighOrLowFilter<700, 5 >, 1>> opticalsensor1L((uint16_t*) ADCPERIPHERAL_inst1_ch1->GetADCDataAddress(), SensorResolution::Resolution16Bit , 0 , 100);
opticalsensor1 = &opticalsensor1L;

static AEObservorSensorFilterOut< 1, Filter<HighOrLowFilter<700, 5 >, 1>> opticalsensor2L((uint16_t*) ADCPERIPHERAL_inst1_ch2->GetADCDataAddress(), SensorResolution::Resolution16Bit , 0 , 100);
opticalsensor2 = &opticalsensor2L;

static EncoderPosition_SPB< true,  1, Filter<AngularDerivativeDiscreteFilter<20, 10 >, 2>> encoderPosition_SPBL; encoderPosition_SPBL.InitSPBObserver(StyleOfSPB::ChainOfSPBsFromInterrupt); 
encoderPosition_SPB = &encoderPosition_SPBL;

static PID_SPB< true,  1> angularPositionPIDL; angularPositionPIDL.InitSPBObserver(StyleOfSPB::ChainOfSPBsFromInterrupt); 
angularPositionPID = &angularPositionPIDL;

static PID_WithDesiredInputAsChannel_SPB< true> angularVelocityPIDL; angularVelocityPIDL.InitSPBObserver(StyleOfSPB::ChainOfSPBsFromInterrupt); 
angularVelocityPID = &angularVelocityPIDL;




static LoopTest looptest_l;
looptest = &looptest_l;
looptest->InitObject(100, AEPriorities::MediumPriority);




//UserCode_Sectionbeforelinks
//UserCode_Sectionbeforelinks_end
static float encoderPosition_SPBchBuffer1[1];
encoderPosition_SPB->AddSignalFlowLinkToChannelWithCopy1(opticalsensor1, encoderPosition_SPBchBuffer1, 1);
static float encoderPosition_SPBchBuffer2[1];
encoderPosition_SPB->AddSignalFlowLinkToChannelWithCopy2(opticalsensor2, encoderPosition_SPBchBuffer2, 1);
static float angularPositionPIDchBuffer1[1];
angularPositionPID->AddSignalFlowLinkToChannelWithCopy1(encoderPosition_SPB, angularPositionPIDchBuffer1, 0);
static float angularVelocityPIDchBuffer1[1];
angularVelocityPID->AddSignalFlowLinkToChannelWithCopy1(encoderPosition_SPB, angularVelocityPIDchBuffer1, 1);
static float angularVelocityPIDchBuffer2[1];
angularVelocityPID->AddSignalFlowLinkToChannelWithCopy2(angularPositionPID, angularVelocityPIDchBuffer2, 0);
motorDriverSpeedControllerTDU->SetToSPBTick(angularVelocityPID);

AE_SubscribeToSPB(encoderPosition_SPB, motorDriverSpeedControllerTDU, &motorDriverSpeedControllerTDU->CurrentPosition, 0);


//UserCode_Sectionbeforeclock
//UserCode_Sectionbeforeclock_end
clock1->SetObservorToClock(opticalsensor1, AEClock_PrescalerEnum::PRESCALER1);
clock1->SetObservorToClock(opticalsensor2, AEClock_PrescalerEnum::PRESCALER1);


//AEITEST_END_TestsAfterTimer_MotorDriverEncoder(5000);
//UserCode_Sectionb
	
	
	angularPositionPID->UserInitialize(80, 5, 15, 50, 40, 0, -20, 20, 5);
	angularVelocityPID->UserInitialize(75, 15, 10, 55, 40, 0, -10, 10);
	motorDriverSpeedControllerTDU->UserInitialize(PWMPERIPHERAL_inst1, GPIOPERIPHERAL_inst1, 11);
	encoderPosition_SPB->UserInitialize(10, false);
	
//UserCode_Sectionb_end

AEAO::ConfigureAndStart();
}


//UserCode_Sectionc
//UserCode_Sectionc_end


static void clock1_cb(TimerHandle_t xTimerHandle) {  
  //UserCode_Sectionclock1before
//UserCode_Sectionclock1before_end 
  
 clock1->Tick(); 
  //UserCode_Sectionclock1after
//UserCode_Sectionclock1after_end 
}


#endif