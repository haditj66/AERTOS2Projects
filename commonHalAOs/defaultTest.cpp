//generated file: C:/AERTOSProjects/commonHalAOs\defaultTest.cpp
//**********************************************************************
//this is an auto-generated file using the template file located in the directory of C:\CodeGenerator\CodeGenerator\bin\Debug\..\..\FileTemplates\Files
//ONLY WRITE CODE IN THE UserCode_Section BLOCKS
//If you write code anywhere else,  it will be overwritten. modify the actual template file if needing to modify code outside usersection blocks.

//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


 
#if INTEGRATION_TESTS_FOR_commonHalAOs__defaultTest
 
#include "IntegTestPipeline.h"


#include "AECore.h"
#include "AE_Init.h" 
#include "AEClock.h" 
#include "AEObjects.h" 

DECLARE_ALL_AO_PTR

static void clocl1_callback(TimerHandle_t xTimerHandle);
#include "LoopObjectTest.h"
static LoopObjectTest* loopObjectTest;




//UserCode_Sectiona


 

class TestUnion
{
public:
	TestUnion()
	{
	}
	
	void SetSingle()
	{
		evt[0] = 0;
	}
	void SetDouble()
	{
		signalEvt[0] = 0;

	}
	
	union 
	{
		float evt[20];
		float signalEvt[40];
		
	};
private:
	
};
#include "ButtonDrive.h"
#include "AEUART.h"
static ButtonDrive* button1;
//UserCode_Sectiona_end

void RunSelectedIntegrationTest_defaultTest()
{

AE_Init();
 //UserCode_Sectionbeforemain
	 
	
	
	static ButtonDrive button1_l;
	button1_l.Init(GPIOInputPERIPHERAL_inst1);
	button1 = &button1_l;
	
	TestUnion test;
	test.SetDouble();
	
	TestUnion test2;
	test2.SetSingle();
	
	int tt = sizeof(test);
	int tt2 = sizeof(test2);
	
//UserCode_Sectionbeforemain_end












static AEClock<AEObservorSensorDUMMY, AEObservorInterpretorBaseDUMMY, 0, 0, 1, 0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 1> clocl1L(100, clocl1_callback);
clocl1 = &clocl1L;

static UploadDataToPcU uploadDataToPcU_L; uploadDataToPcU_L.Init(AEPriorities::MediumPriority);
uploadDataToPcU = &uploadDataToPcU_L;




static MotorDriverPWMU motorDriverpwmU_L; motorDriverpwmU_L.Init(AEPriorities::MediumPriority);
motorDriverpwmU = &motorDriverpwmU_L;


static MotorDriverU motorDriverU_L; motorDriverU_L.Init(AEPriorities::MediumPriority);
motorDriverU = &motorDriverU_L;


static LoopObjectTest loopObjectTest_l;
loopObjectTest = &loopObjectTest_l;
loopObjectTest->InitObject(10, AEPriorities::MediumPriority);



//UserCode_Sectionbeforelinks
//UserCode_Sectionbeforelinks_end



//UserCode_Sectionbeforeclock
//UserCode_Sectionbeforeclock_end
clocl1->SetTDUToClock(motorDriverpwmU, AEClock_PrescalerEnum::PRESCALER1);
clocl1->SetTDUToClock(uploadDataToPcU, AEClock_PrescalerEnum::PRESCALER64);


//AEITEST_END_TestsAfterTimer_commonHalAOs(5000);
//UserCode_Sectionb
	motorDriverpwmU->UserInitialize(PWMPERIPHERAL_inst1, GPIOPERIPHERAL_inst1, 20);
	GPIOsNeededForMotor gpioMotor(
(AEGPIOOutput*)GPIOPERIPHERAL2_Instance, 
(AEGPIOOutput*)GPIOPERIPHERAL3_Instance);
	
	motorDriverU->UserInitialize(&gpioMotor);
	
	uploadDataToPcU->UserInitialize(UARTPERIPHERAL_inst2);
	
//UserCode_Sectionb_end

AEAO::ConfigureAndStart();
}


//UserCode_Sectionc
//UserCode_Sectionc_end


static void clocl1_callback(TimerHandle_t xTimerHandle) {  
  //UserCode_Sectionclocl1before
//UserCode_Sectionclocl1before_end 
  
 clocl1->Tick(); 
  //UserCode_Sectionclocl1after
//UserCode_Sectionclocl1after_end 
}


#endif