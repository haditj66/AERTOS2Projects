//generated file: C:/AERTOSProjects/commonAOs\include\HighOrLowFilter.h
//**********************************************************************
//this is an auto-generated file using the template file located in the directory of C:\CodeGenerator\CodeGenerator\bin\Debug\..\..\FileTemplates\Files
//ONLY WRITE CODE IN THE UserCode_Section BLOCKS
//If you write code anywhere else,  it will be overwritten. modify the actual template file if needing to modify code outside usersection blocks.

//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

#pragma once 

#include <cstdint>
#include "AEFilter.h"


//UserCode_Sectionheader
//UserCode_Sectionheader_end

template<int32_t _ThresholdOfAHigh , int32_t _countsToHighOrLow >
class HighOrLowFilter //: public Filter<HighOrLowFilter< _ThresholdOfAHigh ,  _countsToHighOrLow >, 1>
{
  template<class TFilterDerived, uint16_t PastDataBufferSize>
	friend class Filter;

public:



//UserCode_Sectionpubl
//UserCode_Sectionpubl_end

	HighOrLowFilter();

protected:

//UserCode_Sectionprot
//UserCode_Sectionprot_end
	
	void InitializeImpl(float samplingPeriodOfObservorInSeconds);

	const float*  PastDataCircularBuffer;
	float SamplingPeriodOfObservorInSeconds;
	uint16_t PastDataBufferSize;

private:
	float RunFilter(float newestInput);
	
	//UserCode_Sectionpriv
	//const uint8_t countsToHighOrLow = 5;
	volatile uint16_t highs = 0;
	volatile uint16_t lows = 0;
	volatile uint8_t HighLowprev = 0;
	bool firstUpdate;
	
	bool fuckmypussy = true;
//UserCode_Sectionpriv_end
	

};

template<int32_t _ThresholdOfAHigh , int32_t _countsToHighOrLow >
inline HighOrLowFilter< _ThresholdOfAHigh ,  _countsToHighOrLow >::HighOrLowFilter()
{
	
	//UserCode_Sectionctor
//UserCode_Sectionctor_end
}
 
template<int32_t _ThresholdOfAHigh , int32_t _countsToHighOrLow >
inline void HighOrLowFilter< _ThresholdOfAHigh ,  _countsToHighOrLow >::InitializeImpl(float samplingPeriodOfObservorInSeconds)
{
	//UserCode_Sectioninit
	highs = 0;
	lows = 0;
	HighLowprev = 0;
	firstUpdate = true;
//UserCode_Sectioninit_end
}

template<int32_t _ThresholdOfAHigh , int32_t _countsToHighOrLow >
inline float HighOrLowFilter< _ThresholdOfAHigh ,  _countsToHighOrLow >::RunFilter(float newestInput)
{
//PastDataCircularBuffer[0] is the newest input
//example: float der = (PastDataCircularBuffer[0] - PastDataCircularBuffer[1]) / this->SamplingPeriodOfObservorInSeconds;
//return the output of the filter
//return der;

//UserCode_Sectionimpl
	if (firstUpdate == true)
	{
		if (newestInput > _ThresholdOfAHigh)
		{
			firstUpdate = false;
			highs = _countsToHighOrLow;
			HighLowprev = 1;
			return 1;
		}
		else {
			firstUpdate = false;
			lows = _countsToHighOrLow;
			HighLowprev = 0;
			return 0;
		}
	}
  
	if (newestInput > _ThresholdOfAHigh)//2395)
	{
		highs++; 
		lows = 0;

		if (highs > _countsToHighOrLow)
		{
			highs = _countsToHighOrLow;
			HighLowprev = 1;
			return 1;
		}
	}
	else
	{
		lows++;
		highs = 0;

		if (lows > _countsToHighOrLow)
		{
			lows = _countsToHighOrLow;
			HighLowprev = 0;
			return 0;
		} 
	} 

	return HighLowprev;
//UserCode_Sectionimpl_end
 
}


//UserCode_Sectionfunc
//UserCode_Sectionfunc_end