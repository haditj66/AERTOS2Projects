//generated file: C:/AERTOSProjects/commonAOs\include\ThreeDimensionalVectorSPB.h
//**********************************************************************
//this is an auto-generated file using the template file located in the directory of C:\CodeGenerator\CodeGenerator\bin\Debug\..\..\FileTemplates\Files
//ONLY WRITE CODE IN THE UserCode_Section BLOCKS
//If you write code anywhere else,  it will be overwritten. modify the actual template file if needing to modify code outside usersection blocks.

//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

#pragma once


#include "AESPBObservorOutputType.h"
#include "AEUtils.h"
#include "FreeRTOS.h"
#include "AEFilter.h"

#include "AEIntegrationTesting.h"

//UserCode_Sectionheader
//UserCode_Sectionheader_end

template<bool isSubscribable, TEMPLATESPB_Filters>
	class ThreeDimensionalVectorSPB :
		public AESPBObservorOutputType <4, 3, isSubscribable,
TEMPLATESPB_FilterParams,
1, false,
1, false,
1, false>
	{
	public:
		ThreeDimensionalVectorSPB();
		
		//UserCode_Sectionpublic
//UserCode_Sectionpublic_end


	
	
	private:
	//UserCode_Sectionprivate
//UserCode_Sectionprivate_end

		void RefreshOVERRIDE(float OutputSignal[4]) override;

	};


//UserCode_Sectionfunc
//UserCode_Sectionfunc_end


template<bool isSubscribable, TEMPLATESPB_FiltersFunctionParams>
	inline ThreeDimensionalVectorSPB< isSubscribable, TEMPLATESPB_FilterParams>::ThreeDimensionalVectorSPB()
	{
		//UserCode_Sectionctor
//UserCode_Sectionctor_end
	}

template<bool isSubscribable, TEMPLATESPB_FiltersFunctionParams>
	inline void ThreeDimensionalVectorSPB< isSubscribable, TEMPLATESPB_FilterParams>::RefreshOVERRIDE(float OutputSignal[4])
	{

		float* ch1 = this->InputChannels[0]->ChannelSignalBufferSingle; 
float* ch2 = this->InputChannels[1]->ChannelSignalBufferSingle; 
float* ch3 = this->InputChannels[2]->ChannelSignalBufferSingle; 

 
		//UserCode_Sectionrefresh
		float magnitude = sqrtf((ch1[0] * ch1[0]) + (ch2[0] * ch2[0]) + (ch3[0] * ch3[0]));
		float u = ch1[0] / magnitude;
		float v = ch2[0] / magnitude;
		float w = ch3[0] / magnitude;

		OutputSignal[0] = magnitude;
		OutputSignal[1] = u;
		OutputSignal[2] = v;
		OutputSignal[3] = w;
//UserCode_Sectionrefresh_end
	}

